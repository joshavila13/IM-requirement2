package scis.ui.customers;

import scis.Data;
import scis.Direction;
import scis.model.Customers;
import scis.ui.CustomDocumentListener;
import scis.ui.ShowProcessor;
import scis.utility.AppUtils;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;


public class ShowCustomersPanel extends javax.swing.JPanel implements ShowProcessor<Customers> {

    private Direction direction = Direction.ASC;
    private CustomerColumns customerColumns = null;

    /**
     * Creates new form ShowCustomersPanel
     */
    public ShowCustomersPanel() {
        initComponents();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        txtSearchCustomer = new javax.swing.JTextField();
        lblSearchCustomer = new javax.swing.JLabel();
        btnCreateNewCustomer = new javax.swing.JButton();

        JTableHeader header = tblCustomers.getTableHeader();
        header.addMouseListener(new TableHeaderMouseListener(tblCustomers));
        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "#", "Name", "Address", "Tel No"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCustomers);
        if (tblCustomers.getColumnModel().getColumnCount() > 0) {
            tblCustomers.getColumnModel().getColumn(0).setMinWidth(30);
            tblCustomers.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblCustomers.getColumnModel().getColumn(0).setMaxWidth(30);
            tblCustomers.getColumnModel().getColumn(1).setMinWidth(100);
            tblCustomers.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblCustomers.getColumnModel().getColumn(1).setMaxWidth(100);
            tblCustomers.getColumnModel().getColumn(3).setMinWidth(150);
            tblCustomers.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblCustomers.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        CustomDocumentListener cdl = new CustomDocumentListener(e -> {
            searchAction(e);
        });
        txtSearchCustomer.getDocument().addDocumentListener(cdl);

        lblSearchCustomer.setText("Search");

        btnCreateNewCustomer.setText("Create New Customer");
        btnCreateNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewCustomerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblSearchCustomer)
                                                .addGap(9, 9, 9)
                                                .addComponent(txtSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnCreateNewCustomer)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblSearchCustomer)
                                        .addComponent(btnCreateNewCustomer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewCustomerActionPerformed
        JDialog jd = new JDialog();
        CreateCustomerPanel ccp = new CreateCustomerPanel();
        jd.add(ccp);
        jd.setLocationRelativeTo(this);
        jScrollPane1.setVisible(true);
        if (ccp.isCustomerCreated()) {
            updateTable();
        }
    }//GEN-LAST:event_btnCreateNewCustomerActionPerformed

    @Override
    public void showEntities(List<Customers> customers) {
        if (tblCustomers.getRowCount() != 0)
            AppUtils.removeAll(tblCustomers);

        if (AppUtils.isListEmpty(customers)) return;

        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();

        for (int i = 0; i < customers.size(); i++) {
            Customers customer = customers.get(i);
            String name = customer.getCustname();
            String address = customer.getAddress();
            String tellNo = customer.getTelno();
            Object[] data = {(i + 1), name, address, tellNo};

            model.addRow(data);
        }
    }

    @Override
    public List<Customers> getEntities() {
        AppUtils.openDB();
        ArrayList<Customers> list = Data.getCustomers();
        AppUtils.closeDB(this);
        return list;
    }

    @Override
    public void updateTable() {
        List<Customers> customers = getEntities();
        showEntities(customers);
    }

    @Override
    public void searchAction(DocumentEvent documentEvent) {
        String searchTxt = txtSearchCustomer.getText();
        AppUtils.openDB();
        List<Customers> customers = Data.getCustomers(searchTxt);
        AppUtils.closeDB(this);
        showEntities(customers);
    }

    class TableHeaderMouseListener extends MouseAdapter {

        private JTable table;

        public TableHeaderMouseListener(JTable table) {
            this.table = table;
        }

        public void mouseClicked(MouseEvent event) {
            Point point = event.getPoint();
            int column = table.columnAtPoint(point);

            if (column == 0)
                return;

            CustomerColumns clickedColumn = getDBColumn(column);
            setDirection(clickedColumn);
            fetchAndSetData(clickedColumn, direction);

            //For UI action remembrance
            customerColumns = clickedColumn;
        }

        private void fetchAndSetData(CustomerColumns customerColumns, Direction direction) {
            String searchTxt = txtSearchCustomer.getText();
            AppUtils.openDB();
            List<Customers> customers = Data.getCustomers(searchTxt, customerColumns, direction);
            AppUtils.closeDB(ShowCustomersPanel.this);
            showEntities(customers);
        }

private void setDirection(CustomerColumns clickedColumn) {
    if (customerColumns == null) {
        direction = Direction.ASC;
    } else {
        if (customerColumns == clickedColumn) {
            direction = (direction == Direction.ASC) ? Direction.DESC : Direction.ASC;
        } else {
            direction = Direction.ASC;
        }
    }
}

private CustomerColumns getDBColumn(int clickedUIColumn) {
    switch (clickedUIColumn) {
        case 1:
            return CustomerColumns.NAME;
        case 2:
            return CustomerColumns.ADDRESS;
        case 3:
            return CustomerColumns.TELL_NO;
    }

    return null;
}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateNewCustomer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchCustomer;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTextField txtSearchCustomer;
    // End of variables declaration//GEN-END:variables
}
