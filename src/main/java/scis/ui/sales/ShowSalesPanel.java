package scis.ui.sales;

import scis.model.Customers;
import scis.model.Products;
import scis.model.Sales;
import scis.ui.ButtonColumn;
import scis.ui.CustomDocumentListener;
import scis.ui.ShowProcessor;
import scis.utility.AppUtils;
import scis.Data;

import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


public class ShowSalesPanel extends javax.swing.JPanel implements ShowProcessor<Sales> {

    /**
     * Creates new form ShowSalesPanel
     */
    public ShowSalesPanel() {
        initComponents();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        lblSearchInvoice = new javax.swing.JLabel();
        txtSearchInvoice = new javax.swing.JTextField();
        btnNewSale = new javax.swing.JButton();

        tblInvoices.setAutoCreateRowSorter(true);
        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Invoice ID", "Date Time", "Customer", "Amount", "Details"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInvoices);

        lblSearchInvoice.setText("Search Invoice");

        CustomDocumentListener cdl = new CustomDocumentListener(e ->{
            searchAction(e);
        });
        txtSearchInvoice.getDocument().addDocumentListener(cdl);

        btnNewSale.setText("New Sale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchInvoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewSale, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchInvoice)
                    .addComponent(txtSearchInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewSale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void searchAction(DocumentEvent e) {
        String searchTxt = txtSearchInvoice.getText();
        AppUtils.openDB();
        List<Sales> sales = Data.getSales(searchTxt);
        AppUtils.closeDB(this);
        showEntities(sales);
    }


    @Override
    public void showEntities(List<Sales> entities) {
        if (tblInvoices.getRowCount() != 0)
            AppUtils.removeAll(tblInvoices);

        if (AppUtils.isListEmpty(entities)) return;

        DefaultTableModel model = (DefaultTableModel) tblInvoices.getModel();

        for (int i = 0; i < entities.size(); i++) {
            Sales sale = entities.get(i);
            String invID = sale.getInvid();
            Customers customers = sale.getCustomer();
            Date invDate = sale.getInvdate();
            double amount = sale.getAmount();
            String showDetails = "Show Details";
            Object[] data = {(i + 1), invID, AppUtils.formattedDate(invDate), customers.getCustname(), amount, showDetails};

            model.addRow(data);
        }

        new ButtonColumn(tblInvoices, 5, evt -> {
            if (tblInvoices.getSelectedColumn() == 5) {
                AppUtils.showInfoDialog(this, "Success", String.format("Button Column Works -- row:%d -- column:%d", tblInvoices.getSelectedRow(), tblInvoices.getSelectedColumn()));
            }
        });
    }


    @Override
    public List<Sales> getEntities() {
        AppUtils.openDB();
        ArrayList<Sales> list = Data.getSales();
        AppUtils.closeDB(this);
        return list;
    }

    @Override
    public void updateTable() {
        List<Sales> sales = getEntities();
        showEntities(sales);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewSale;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchInvoice;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTextField txtSearchInvoice;
    // End of variables declaration//GEN-END:variables
}
